{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to a python implementation of ProjectEuler!\n\n\nProject Documentation can be found here: \nhttps://10jmellott.github.io/ProjectEuler/\n\n\nSolved:\n\n\n\n\n001 - Multiples of 3 and 5\n\n\n002 - Even Fibonacci Numbers\n\n\n003 - Largest Prime Factor\n\n\n004 - Largest Palindrome Product\n\n\n005 - Smallest Multiple\n\n\n\n\nWIP:\n\n\n\n\nNone",
            "title": "Home"
        },
        {
            "location": "/problems/p001/",
            "text": "Multiples of 3 and 5\n\n\n\n\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef is_multiple(base, multiple)\n\n\n\n\n\n\nDetermine if base is a multiple of multiple\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nbase\n \nInteger\n: Base value\n\n\nmultiple\n \nInteger\n: Multiple value\n\n\n\n\n\n\n\n\nReturns \nBoolean\n: True if base is a multiple of multiple, false otherwise\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P1 - Multiples of 3 and 5"
        },
        {
            "location": "/problems/p002/",
            "text": "Even Fibonacci Numbers\n\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P2 - Even Fibonacci Numbers"
        },
        {
            "location": "/problems/p003/",
            "text": "Largest prime factor\n\n\n\n\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P3 - Largest Prime Factor"
        },
        {
            "location": "/problems/p004/",
            "text": "Largest palindrome product\n\n\n\n\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef is_palindrome(n)\n\n\n\n\n\n\nTests if a number is a palindrome\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Integer to test palindromomity\n\n\n\n\n\n\n\n\nReturns \nBoolean\n: True if n is a palindrome, false otherwise\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P4 - Largest Palindrome Product"
        },
        {
            "location": "/problems/p005/",
            "text": "Smallest multiple\n\n\n\n\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P5 - Smallest Multiple"
        },
        {
            "location": "/utils/stopwatch/",
            "text": "Stopwatch\n\n\n\n\n\nA simple stopwatch implementation modified from \nigniteflow's gist\n (a github snippet repository).\n\n\n\n\nClasses\n\n\n\nclass Timer\n\n\n\n\n\n\nA simple stopwatch.\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef start()\n\n\n\n\n\n\n\n\nStarts the timer\n\n\n\n\n\n\ndef stop()\n\n\n\n\n\n\n\n\nStops the timer\n\n\n\n\n\n\ndef elapsed()\n\n\n\n\n\n\n\n\nTime elapsed for this timer either since calling start or from start to stop if stop was called",
            "title": "Stopwatch"
        },
        {
            "location": "/utils/eratosthenes/",
            "text": "Eratosthenes' Algorithms\n\n\n\nIntrinsic Functions\n\n\n\ndef sieve(n)\n\n\n\n\n\n\nSieve of Eratosthenes\n - Finds prime numbers\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Maximum value to look for primes under\n\n\n\n\n\n\n\n\nReturns \nInteger Array\n: Array of all primes less than n",
            "title": "Eratosthenes"
        },
        {
            "location": "/utils/fibonacci/",
            "text": "Fibonacci's Algorithms\n\n\n\nIntrinsic Functions\n\n\n\ndef trial_division(n)\n\n\n\n\n\n\nTrial Division\n\n\n\n\n\n\nReturns \nArray\n: List of factors of n\n\n\n\n\n\n\ndef fib_basic(n)\n\n\n\n\n\n\nSimple fibonacci sequence implementation\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index\n\n\n\n\n\n\ndef fib(n)\n\n\n\n\n\n\nOptimized fibonacci sequence implementation utilizing memoization\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index\n\n\n\n\n\n\ndef _fib(n, memoization)\n\n\n\n\n\n\n[Internal] Recursive fibonacci sequence implementation utilizing memoization\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Index of the fibonacci number\n\n\nmemoization\n \nDictionary\n: Non-Null dictionary with prior memoized values\n\n\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index",
            "title": "Fibonacci"
        },
        {
            "location": "/documentation/__main__/",
            "text": "Python Docstring to Markdown\n\n\n\n\n\nAttempts to parse a python document and resolve a markdown file with unique formatting.\n\nAssumes Google's Docstring formatting.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef parse_file(filename)\n\n\n\n\n\n\ndef cli()\n\n\n\n\n\n\nCommand line interface. Parses input file and optional output file from the command line in sys.argv index 1 and 2 respectively.",
            "title": "Main"
        },
        {
            "location": "/documentation/DocumentDocstring/",
            "text": "Classes\n\n\n\nclass DocumentDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nDocumentDocstring(expression)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef title()\n\n\n\n\n\n\n\n\ndef body()",
            "title": "Document Header"
        },
        {
            "location": "/documentation/GoogleDocstring/",
            "text": "Classes\n\n\n\nclass GoogleDocstringReturn\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nGoogleDocstringReturn(docstring)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef return_type()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleDocstringArgument\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nGoogleDocstringArgument(docstring)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef arg_type()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleFunctionDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nGoogleFunctionDocstring(function_def)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef is_valid()\n\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef short_description()\n\n\n\n\n\n\n\n\ndef arguments()\n\n\n\n\n\n\n\n\ndef return_description()\n\n\n\n\n\n\n\n\nclass GoogleClassDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nGoogleClassDocstring(class_def)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\ndef constructors()\n\n\n\n\n\n\n\n\ndef methods()",
            "title": "Google Docstring"
        },
        {
            "location": "/documentation/HtmlMarkdownBuilder/",
            "text": "Classes\n\n\n\nclass HtmlMarkdownBuilder\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\nHtmlMarkdownBuilder()\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\ndef append(markdown, div)\n\n\n\n\n\n\n\n\ndef append_to_block(block)\n\n\n\n\n\n\n\n\ndef complete_block()\n\n\n\n\n\n\n\n\ndef indent()\n\n\n\n\n\n\n\n\ndef deindent()\n\n\n\n\n\n\n\n\ndef build()",
            "title": "Markdown Html Formatter"
        }
    ]
}
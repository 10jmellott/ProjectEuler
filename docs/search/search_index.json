{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to a python implementation of ProjectEuler!\n\n\nProject Documentation can be found here: \nhttps://10jmellott.github.io/ProjectEuler/\n\n\nSolved:\n\n\n\n\n001 - Multiples of 3 and 5\n\n\n002 - Even Fibonacci Numbers\n\n\n003 - Largest Prime Factor\n\n\n004 - Largest Palindrome Product\n\n\n005 - Smallest Multiple\n\n\n006 - Sum Square Difference\n\n\n007 - 10001st Prime\n\n\n008 - Largest Product in a Series\n\n\n009 - Special Pythagorean Triplet\n\n\n010 - Summation of Primes\n\n\n011 - Largest Product in a Grid\n\n\n012 - Highly Divisible Triangular Number\n\n\n013 - Large Sum\n\n\n\n\nWIP:\n\n\n\n\nNone",
            "title": "Home"
        },
        {
            "location": "/problems/p001/",
            "text": "Multiples of 3 and 5\n\n\n\n\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef is_multiple(base, multiple)\n\n\n\n\n\n\nDetermine if base is a multiple of multiple\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nbase\n \nInteger\n: Base value\n\n\nmultiple\n \nInteger\n: Multiple value\n\n\n\n\n\n\n\n\nReturns \nBoolean\n: True if base is a multiple of multiple, false otherwise\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P1 - Multiples of 3 and 5"
        },
        {
            "location": "/problems/p002/",
            "text": "Even Fibonacci Numbers\n\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P2 - Even Fibonacci Numbers"
        },
        {
            "location": "/problems/p003/",
            "text": "Largest prime factor\n\n\n\n\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P3 - Largest Prime Factor"
        },
        {
            "location": "/problems/p004/",
            "text": "Largest palindrome product\n\n\n\n\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef is_palindrome(n)\n\n\n\n\n\n\nTests if a number is a palindrome\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Integer to test palindromomity\n\n\n\n\n\n\n\n\nReturns \nBoolean\n: True if n is a palindrome, false otherwise\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P4 - Largest Palindrome Product"
        },
        {
            "location": "/problems/p005/",
            "text": "Smallest multiple\n\n\n\n\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P5 - Smallest Multiple"
        },
        {
            "location": "/problems/p006/",
            "text": "Sum square difference\n\n\n\n\n\nThe sum of the squares of the first ten natural numbers is,\n\n1\n2\n + 2\n2\n + ... + 10\n2\n = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n(1 + 2 + ... + 10)\n2\n = 55\n2\n = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 \u2212 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P6 - Sum Square Difference"
        },
        {
            "location": "/problems/p007/",
            "text": "10001st prime\n\n\n\n\n\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves the problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P7 - 10001st Prime"
        },
        {
            "location": "/problems/p008/",
            "text": "Largest product in a series\n\n\n\n\n\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 \u00d7 9 \u00d7 8 \u00d7 9 = 5832.\n\n(SEE PROJECT EULER OR INPUT FOLDER FOR NUMBER)\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves the problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P8 - Largest Product in a Series"
        },
        {
            "location": "/problems/p009/",
            "text": "Special Pythagorean Triplet\n\n\n\n\n\nA Pythagorean triplet is a set of three natural numbers, \na\n < \nb\n < \nc\n, for which,\n\na\n2\n + b\n2\n = c\n2\n\nFor example, 3\n2\n + 4\n2\n = 9 + 16 = 25 = 5\n2\n.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\n\nFind the product \nabc\n.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P9 - Special Pythagorean Triplet"
        },
        {
            "location": "/problems/p010/",
            "text": "Summation of Primes\n\n\n\n\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P10 - Summation of Primes"
        },
        {
            "location": "/problems/p011/",
            "text": "Largest product in a grid\n\n\n\n\n\nIn the 20\u00d720 grid below, four numbers along a diagonal line have been marked in red.\n\n(SEE PROJECT EULER OR INPUT FOLDER FOR GRID)\n\nThe product of these numbers is 26 \u00d7 63 \u00d7 78 \u00d7 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20\u00d720 grid?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef test_vertical(values, N)\n\n\n\n\n\n\ndef test_horizontal(values, N)\n\n\n\n\n\n\ndef test_diagonal_right(values, N)\n\n\n\n\n\n\ndef test_diagonal_left(values, N)\n\n\n\n\n\n\ndef mult(x, y)\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nSolves the problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P11 - Largest Product in a Grid"
        },
        {
            "location": "/problems/p012/",
            "text": "Highly divisible triangular number\n\n\n\n\n\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle \nnumber would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n\n 3: 1,3\n\n 6: 1,2,3,6\n\n10: 1,2,5,10\n\n15: 1,3,5,15\n\n21: 1,3,7,21\n\n28: 1,2,4,7,14,28\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P12 - Highly Divisible Triangular Number"
        },
        {
            "location": "/problems/p013/",
            "text": "Large sum\n\n\n\n\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n(SEE PROJECT EULER OR INPUT FOLDER FOR VALUE)\n\n\n\n\nIntrinsic Functions\n\n\n\ndef main()\n\n\n\n\n\n\nSolves this problem\n\n\n\n\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P13 - Large Sum"
        },
        {
            "location": "/utils/stopwatch/",
            "text": "Stopwatch\n\n\n\n\n\nA simple stopwatch implementation modified from \nigniteflow's gist\n (a github snippet repository).\n\n\n\n\nClasses\n\n\n\nclass Timer\n\n\n\n\n\n\nA simple stopwatch.\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef start()\n\n\n\n\n\n\n\n\nStarts the timer\n\n\n\n\n\n\ndef stop()\n\n\n\n\n\n\n\n\nStops the timer\n\n\n\n\n\n\ndef elapsed()\n\n\n\n\n\n\n\n\nTime elapsed for this timer either since calling start or from start to stop if stop was called",
            "title": "Stopwatch"
        },
        {
            "location": "/utils/eratosthenes/",
            "text": "Eratosthenes' Algorithms\n\n\n\nIntrinsic Functions\n\n\n\ndef sieve(n)\n\n\n\n\n\n\nSieve of Eratosthenes\n - Finds prime numbers\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Maximum value to look for primes under\n\n\n\n\n\n\n\n\nReturns \nInteger Array\n: Array of all primes less than n",
            "title": "Eratosthenes"
        },
        {
            "location": "/utils/fibonacci/",
            "text": "Fibonacci's Algorithms\n\n\n\nIntrinsic Functions\n\n\n\ndef trial_division(n)\n\n\n\n\n\n\nTrial Division\n\n\n\n\n\n\nReturns \nArray\n: List of factors of n\n\n\n\n\n\n\ndef factors_to_dictionary(factors)\n\n\n\n\n\n\nTransforms a list of factors into a dictionary\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nfactors\n \nlist\n: List of factors\n\n\n\n\n\n\n\n\nReturns \ndict\n: Dictionary of factors to count\n\n\n\n\n\n\ndef fib_basic(n)\n\n\n\n\n\n\nSimple fibonacci sequence implementation\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index\n\n\n\n\n\n\ndef fib(n)\n\n\n\n\n\n\nOptimized fibonacci sequence implementation utilizing memoization\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index\n\n\n\n\n\n\ndef _fib(n, memoization)\n\n\n\n\n\n\n[Internal] Recursive fibonacci sequence implementation utilizing memoization\n\n\n\n\n\n\nArgs:\n\n\n\n\n\n\n\n\nn\n \nInteger\n: Index of the fibonacci number\n\n\nmemoization\n \nDictionary\n: Non-Null dictionary with prior memoized values\n\n\n\n\n\n\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index",
            "title": "Fibonacci"
        },
        {
            "location": "/utils/oeis/",
            "text": "The On-Line Encyclopedia of Integer Sequences\n\n\n\n\n\nThis is an online database of useful sequences and some initial values to quickly \nretrieve a formula rather than coming up with one yourself.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef square_pyramidal_numbers(n)\n\n\n\n\n\n\nSquare Pyramidal Numbers - A000330\n\n\n\n\n\n\nReturns \nInteger\n: Value of this sequence at the specified index\n\n\n\n\n\n\ndef triangular_numbers(n)\n\n\n\n\n\n\nTriangular Numbers - A000217\n\n\n\n\n\n\nReturns \nInteger\n: Value of this sequence at the specified index",
            "title": "OEIS"
        },
        {
            "location": "/documentation/__main__/",
            "text": "Python Docstring to Markdown\n\n\n\n\n\nAttempts to parse a python document and resolve a markdown file with unique formatting.\n\nAssumes Google's Docstring formatting.\n\n\n\n\nIntrinsic Functions\n\n\n\ndef parse_file(filename)\n\n\n\n\n\n\ndef cli()\n\n\n\n\n\n\nCommand line interface. Parses input file and optional output file from the command line in sys.argv index 1 and 2 respectively.",
            "title": "Main"
        },
        {
            "location": "/documentation/DocumentDocstring/",
            "text": "Classes\n\n\n\nclass DocumentDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nDocumentDocstring(expression)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef title()\n\n\n\n\n\n\n\n\ndef body()",
            "title": "Document Header"
        },
        {
            "location": "/documentation/GoogleDocstring/",
            "text": "Classes\n\n\n\nclass GoogleDocstringReturn\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nGoogleDocstringReturn(docstring)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef return_type()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleDocstringArgument\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nGoogleDocstringArgument(docstring)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef arg_type()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleFunctionDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nGoogleFunctionDocstring(function_def)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef is_valid()\n\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef short_description()\n\n\n\n\n\n\n\n\ndef arguments()\n\n\n\n\n\n\n\n\ndef return_description()\n\n\n\n\n\n\n\n\nclass GoogleClassDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nGoogleClassDocstring(class_def)\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef name()\n\n\n\n\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\ndef constructors()\n\n\n\n\n\n\n\n\ndef methods()",
            "title": "Google Docstring"
        },
        {
            "location": "/documentation/HtmlMarkdownBuilder/",
            "text": "Classes\n\n\n\nclass HtmlMarkdownBuilder\n\n\n\n\n\n\nConstructors\n\n\n\n\n\n\n\n\n\nHtmlMarkdownBuilder()\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\n\n\n\n\n\ndef append(markdown, div)\n\n\n\n\n\n\n\n\ndef append_to_block(block)\n\n\n\n\n\n\n\n\ndef complete_block()\n\n\n\n\n\n\n\n\ndef indent()\n\n\n\n\n\n\n\n\ndef deindent()\n\n\n\n\n\n\n\n\ndef build()",
            "title": "Markdown Html Formatter"
        }
    ]
}
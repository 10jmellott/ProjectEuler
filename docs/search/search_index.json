{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to a python implementation of ProjectEuler!",
            "title": "Home"
        },
        {
            "location": "/problems/p001/",
            "text": "Multiples of 3 and 5\n\n\n\nSummary\n\n\n\n\n\n\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n\n\n\n\n\nIntrinsic Functions\n\n\n\ndef is_multiple(base, multiple)\n\n\n\n\n\n\nDetermine if base is a multiple of multiple\n\n\nArgs:\n\n\n\n\nbase\n \nInteger\n: Base value\n\n\nmultiple\n \nInteger\n: Multiple value\n\n\n\n\nReturns \nBoolean\n: True if base is a multiple of multiple, false otherwise\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P1 - Multiples of 3 and 5"
        },
        {
            "location": "/problems/p002/",
            "text": "Even Fibonacci Numbers\n\n\n\nSummary\n\n\n\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\n\n\nIntrinsic Functions\n\n\n\ndef fib(n)\n\n\n\n\n\n\nSimple fibonacci sequence implementation\n\n\nReturns \nInteger\n: Value of the fibonacci sequence at the provided index\n\n\n\n\n\n\ndef main()\n\n\n\n\n\n\nMain method to run and set the parameters for this problem\n\n\nReturns \nInteger\n: Solution to this problem",
            "title": "P2 - Even Fibonacci numbers"
        },
        {
            "location": "/shared_lib/__init__/",
            "text": "Intrinsic Functions\n\n\n\ndef import_test_func()\n\n\n\n\n\n\nTest that the module was imported correctly by calling this function",
            "title": "Intrinsic"
        },
        {
            "location": "/shared_lib/build_markdown/",
            "text": "Python Docstring to Markdown\n\n\n\nSummary\n\n\n\n\n\n\n\nAttempts to parse a python document and resolve a markdown file with unique formatting.\n\nAssumes Google's Docstring formatting.\n\n\n\n\n\n\nClasses\n\n\n\n\n\nclass DocumentDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\nDocumentDocstring(expression)\n\n\n\n\nMethods\n\n\n\n\ndef title()\n\n\n\n\n\n\n\n\n\n\nclass GoogleDocstringArgument\n\n\n\n\n\n\nConstructors\n\n\n\n\nGoogleDocstringArgument(docstring)\n\n\n\n\nMethods\n\n\n\n\ndef name()\n\n\n\n\ndef arg_type()\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleDocstringReturn\n\n\n\n\n\n\nConstructors\n\n\n\n\nGoogleDocstringReturn(docstring)\n\n\n\n\nMethods\n\n\n\n\ndef return_type()\n\n\n\n\ndef description()\n\n\n\n\n\n\n\n\nclass GoogleFunctionDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\nGoogleFunctionDocstring(function_def)\n\n\n\n\nMethods\n\n\n\n\ndef is_valid()\n\n\n\n\ndef name()\n\n\n\n\ndef short_description()\n\n\n\n\ndef arguments()\n\n\n\n\ndef return_description()\n\n\n\n\n\n\n\n\nclass GoogleClassDocstring\n\n\n\n\n\n\nConstructors\n\n\n\n\nGoogleClassDocstring(class_def)\n\n\n\n\nMethods\n\n\n\n\ndef name()\n\n\n\n\ndef constructors()\n\n\n\n\ndef methods()\n\n\n\n\n\n\n\n\n\nIntrinsic Functions\n\n\n\ndef parse_file(filename)\n\n\n\n\n\n\ndef cli()",
            "title": "Documentation"
        }
    ]
}
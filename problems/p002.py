"""<a href="https://projecteuler.net/problem=2" class="title-custom-link">Even Fibonacci Numbers</a>
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:  
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""


def fib_basic(n):
    """Simple fibonacci sequence implementation
    
    Arguments:
        n (Integer): Index of the fibonacci number
    
    Returns:
        Integer: Value of the fibonacci sequence at the provided index
    """
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)


def fib(n):
    """Optimized fibonacci sequence implementation utilizing memoization
    
    Arguments:
        n (Integer): Index of the fibonacci number
    
    Returns:
        Integer: Value of the fibonacci sequence at the provided index
    """
    return _fib(n, {})


def _fib(n, memoization):
    """[Internal] Recursive fibonacci sequence implementation utilizing memoization
    
    Args:
        n (Integer): Index of the fibonacci number
        memoization (Dictionary): Non-Null dictionary with prior memoized values
    
    Returns:
        Integer: Value of the fibonacci sequence at the provided index
    """
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n in memoization:
        return memoization[n]
    memoization[n] = _fib(n - 1, memoization) + _fib(n - 2, memoization)
    return memoization[n]


def main():
    """Main method to run and set the parameters for this problem
    
    Returns:
        Integer: Solution to this problem
    """
    N = 4000000
    i = 0
    v = 0
    memo = {}
    ret = 0
    while v < N:
        v = _fib(i, memo)
        if v < N and v % 2 == 0:
            ret = ret + v
        i = i + 1
    return ret
